#!/bin/bash
# vim: number

# docbook-build - Build script for generating DocBook project snapshots
# $Id$

# fail if no CLASSPATH set
if [ -z "$CLASSPATH" ]; then
  cat <<- EOF
`basename $0`: error: CLASSPATH not set. Stopping.

Before invoking `basename $0`, you must set the Java CLASSPATH
environment variable in the environment from which the script
runs, and it must contain absolute pathnames for the following:

  - Saxon or Xalan2 jar file or classes
  - Xerces jar file(s) or classes
  - Apache XML Commons Resolver jar file or classes
  - directory containing CatalogManager.properties file
EOF
  exit 1
fi

export repo_dir=`dirname $(cd $(dirname $0); pwd)`
# fail if no repo_dir set
if [ -z "$repo_dir" ]; then
  cat <<- EOF
`basename $0`: error: repo_dir not set. Stopping.

Before invoking `basename $0`, you must set the repo_dir
environment variable in the environment from which the script
runs. The value of repo_dir should be the absolute path to the
base of a DocBook Project Subversion working directory that
contains the various DocBook Project modules; that is, such that
the modules can be found in \$repo_dir/xsl, etc.
EOF
  exit 1
fi

umask 002
# set up some defaults
SVNCHECK=no
ENGINE=xsltproc
PDF_MAKER=dblatex
TAR=tar
TARFLAGS=P
ZIPTARG=zip
SITEBASE=/var/www
#SITEUSER=`whoami`
#SITEHOST=web.sourceforge.net
RELEASEVERSION=snapshot
if [ -z "$TMP" ]; then
  TMP=/tmp
fi
# default timeout waiting for lock file to clear is 1200 seconds (20 mins)
LOCK_TIMEOUT=1200

usage="Usage:

  `basename $0` [-a ADDEDSUFFIX] [-b BASEDIR] [-d DOMAIN]
                [-e ENGINENAME] [-f FORMATTER] [-l LOGDIR]
                [-p PATH] [-r] [-s] [-t TMPDIR] [-u USER]
                [-v VERSION] [-x ZIPTARG] [-z ZONE] DISTRO...

"
opts_admon="Type '`basename $0` -h' for details about options.
"

help="
Options:

  -a ADDEDSUFFIX
     Specifies a suffix for any additional packages that are built
     along with the package for this distro. For example, in the
     cause of the docbook-xsl package, we also build docbook-xsl-ns,
     using \"-a ns\"

  -b BASEDIR
     Specifies the location of the base directory containing the
     SVN working directories for modules from the DocBook project
     (directory containing 'xsl', 'dsssl', 'slides', etc. subdirs)
     Default: value of the repo_dir environment variable, if
     set; otherwise, the directory from which the script is run.

  -d DOMAIN
     Specifies the remote host (domain) to which the snaphost is
     uploaded. Default: 'web.sourceforge.net'

  -e ENGINENAME
     Specifies which XSLT engine to use. Default: xsltproc

  -f FORMATTER
     Specifies which formatter to use for generating the PDF
     version of the release notes for the distribution.
     Default: dblatex

  -l LOGDIR
     Specifies the directory to which the script redirects its
     standard output and standard error.
     Default: none -- if not set, stdout and stderr are not
     redirected to a log file.

  -p PATH
     Specifies the upload path on the remote host.
     Default: '/home/groups/d/do/docbook/htdocs/snapshots'

  -r
     If specified, read commit message from standard input.

  -s
     If specified, do an svn check to see if the workspace is up
     to date, and if it is, stop the build.

  -t TMPDIR
     Specifies the directory to which the script writes temporary
     files. Default: /tmp

  -u USER
     Specifies the (Sourceforge) username with which to upload the
     snapshot to the target (Sourceforge) website.
     Default: Username found in SVN/Root in working directory, if
     found; otherwise, local username.

  -v VERSION
     Specifies the version name to put on the build.
     Default: 'snapshot'

  -x ZIPTARG
     Specifies name of the target to use for building compressed
     package file. Default: 'zip'

  -z ZONE
     Specifies timezone to use for date/time stamps.
     Default: none -- if not set, 'date' uses timezone configured
     on local machine.

  DISTRO...
     Space-separated list of distros to build (e.g. 'xsl dsssl')

"
while getopts ":a:b:e:f:d:hl:p:rst:u:v:x:z:" opt; do
  case $opt in
    r  ) # parse commit message
         while read -r LINE
         do
          if echo $LINE | grep "^Revision: " >/dev/null; then
            REVISION=$(echo $LINE | sed -r 's/^Revision: (.+)$/\1/')
            break
          fi
          if echo $LINE | grep "^Modified: " >/dev/null; then
            CHANGEPATH=$(echo $LINE | sed -r 's/^Modified:|Added:|Deleted: (.+)$/\1/')
            break
          fi
         done ;;
    a  ) ADDEDSUFFIX=$OPTARG ;;
    b  ) BUILDDIR=$OPTARG ;;
    e  ) ENGINE=$OPTARG ;;
    f  ) PDF_MAKER=$OPTARG ;;
    l  ) LOGDIR=$OPTARG ;;
    t  ) TMP=$OPTARG ;;
    v  ) RELEASEVERSION=$OPTARG ;;
    u  ) SITEUSER=$OPTARG ;;
    d  ) SITEHOST=$OPTARG ;;
    p  ) SITEBASE=$OPTARG ;;
    s  ) SVNCHECK="yes" ;;
    x  ) ZIPTARG=$OPTARG ;;
    z  ) TZ=$OPTARG
         alias date="TZ=$TZ date" ;;
    h  ) printf "$usage"
         printf "$help"
         exit 0 ;;
    \? ) printf "$usage"
         printf "$opts_admon"
         exit 1 ;;
  esac
done

shift $(($OPTIND - 1))

if [ -z "$BUILDDIR"  ]; then
  BUILDDIR=`pwd`
fi
cd $BUILDDIR

DISTROS="$@"
if [ -z "$DISTROS" ]; then
  DISTROS=xsl
fi

if [ -z "$DISTROS" ]; then
  echo
  echo "`basename $0`: error: No DISTROS specified. Stopping."
  echo
  printf "$usage"
  printf "$opts_admon"
  exit 1;
else
  # We may want to use `git describe` here, once we use real tags...
  REVISION=$(git rev-parse HEAD)
  for DISTRO in $DISTROS; do
    printf "Running svn update in gentext and $DISTRO working directories...\n" 1>&2
    if test "$SVNCHECK" = "yes"; then
      if test $(cat $DISTRO/REVISION) = $REVISION; then
        printf "$DISTRO distro is up to date. Skipping.\n" 1>&2
        break
      fi
    fi
    echo $REVISION > $DISTRO/REVISION
    lock_timer=0
    # wait for lock file (if any) to clear
    printf "Waiting for lock file to clear..." 1>&2
    while [ -f $TMP/docbook-*-$RELEASEVERSION.lock ]; do
      if [ $lock_timer = $LOCK_TIMEOUT ]; then
        # time out after reaching $LOCK_TIMEOUT seconds
        # default is 1200 seconds (20 minutes)
        echo
        printf "Timed out after $LOCK_TIMEOUT seconds waiting for lock file to clear.\n"
        echo "You probably have a stale $TMP/docbook-$DISTRO-$RELEASEVERSION.lock file that you need to delete."
        exit 1
      fi
      printf "." 1>&2
      sleep 1
      let lock_timer=$lock_timer+1
    done 
    printf "Done.\n" 1>&2

    printf "Doing some initialization..." 1>&2
    # create new lock file
    touch $TMP/docbook-$DISTRO-$RELEASEVERSION.lock
    # remove old log file, if any
    rm -f $LOGDIR/docbook-$DISTRO-$RELEASEVERSION.log.tmp

    DATE=`date +%Y-%m-%d`
    TIME=`date '+%H%M'`
    ZONE=`date '+%Z'`

    #if [ -f $DISTRO/CVS/Root ]; then
    #  CVSROOT=`cat $DISTRO/CVS/Root`
    #  export CVSROOT
    #  CVSUSER=`sed 's/^:.\+:\([^@]\+\)@.\+$/\1/' $DISTRO/CVS/Root`
    #  if [ "$CVSUSER" != "anonymous" ]; then
    #    CVS_RSH=ssh
    #    export CVS_RSH
    #  fi
    #  if [ -z "$OVERRIDE_CVSUSER" ]; then
    #    # if no value for USER has been specified via -u option, set
    #    # SITEUSER for ssh uploads to same value as CVSUSER
    #    SITEUSER=$CVSUSER
    #  fi
    #fi
    #rm -f $DISTRO/LatestTag
    rm -f $DISTRO/VERSION
    git checkout $DISTRO/VERSION

    printf "." 1>&2

    # replace the current fm:Version value with the snapshot number
    cp -p $DISTRO/VERSION $DISTRO/VERSION.tmp
    # FIXME: we really should be doing this using a modifiled XSLT identity
    # transform, but anyway, this works OK for now...
    if test "$SVNCHECK" = "yes"; then
      sed "s/Version>.\+</Version>$RELEASEVERSION\_$REVISION\</" $DISTRO/VERSION.tmp > $DISTRO/VERSION
    else
      # forced builds omit $REVISION suffix 
      sed "s/Version>.\+</Version>$RELEASEVERSION\</" $DISTRO/VERSION.tmp > $DISTRO/VERSION
    fi
    rm $DISTRO/VERSION.tmp

    # copy VERSION to VERSION.xsl
    cp $DISTRO/VERSION $DISTRO/VERSION.xsl

    printf "Done.\n" 1>&2

    # start re-directing stout and stderr to log file (if logging enabled)
    if [ $LOGDIR ]; then
      echo "Logging all further output to $LOGDIR/docbook-$DISTRO-$RELEASEVERSION.log.tmp"
      exec 1> $LOGDIR/docbook-$DISTRO-$RELEASEVERSION.log.tmp
      exec 2>&1
    fi

    date
    echo
    # echo selected variables
    set | grep "^CHANGE\|REVISION"
    echo

    #echo "Running svn update in gentext and $DISTRO working directories..."
    #svn cleanup
    #svn update gentext || exit 1
    #svn update $DISTRO || exit 1
    #echo
#
    echo
    date
    echo "Building $DISTRO distribution..."
    echo

    if test "$SVNCHECK" = "yes"; then
      make distrib -C $DISTRO XSLT="$repo_dir/buildtools/xslt -$ENGINE" PDF_MAKER=$PDF_MAKER
    else
      make release -C $DISTRO XSLT="$repo_dir/buildtools/xslt -$ENGINE" PDF_MAKER=$PDF_MAKER
    fi

    cat <<- EOF > HEADER.txt
The snapshot for a particular distribution is re-built automatically each time
a change is checked into the SVN source tree for the distribution. The most
recent build was of the "$DISTRO" distribution, for revision $REVISION,
on $DATE at $TIME $ZONE.

These snapshots are intended for testing purposes only and otherwise come with
no guarantees. Any of them may in fact be broken at any given time.
EOF

    make $ZIPTARG -C $DISTRO ZIPVER=$RELEASEVERSION TMP=$TMP XSLT="$repo_dir/buildtools/xslt -$ENGINE" PDF_MAKER=$PDF_MAKER || exit 1

    cat <<- EOF > $TMP/line.tmp

--------------------------------------------------------------------------------
Latest Changes:
--------------------------------------------------------------------------------

EOF
    git log -n 200 > LatestChanges

    cat HEADER.txt $TMP/line.tmp LatestChanges > README.txt
    rm $TMP/line.tmp

    # Uncompress tarball to local mirror directory.
    # Previously, we uploaded and untarred it to the remote host
    # (sourceforge.net web server), but 100Mb quota limit at
    # Sourceforge made that a not-very-efficient use of the
    # project disk space
    cp $TMP/docbook*-$DISTRO*$RELEASEVERSION.tar.bz2 $SITEBASE
    (umask 002; \
    cd $SITEBASE; \
    rm -f docbook-$DISTRO-$RELEASEVERSION.log; \
    rm -rf $DISTRO; \
    rm -rf $DISTRO-$ADDEDSUFFIX; \
    for tarball in docbook-$DISTRO*$RELEASEVERSION.tar.bz2; do \
    cat $tarball | bunzip2 | \
    (cd $TMP; $TAR xf$TARFLAGS -); \
    done; \
    mkdir $DISTRO; \
    cp -pR $TMP/docbook-$DISTRO-$RELEASEVERSION/* $DISTRO; \
    if [ -d  $TMP/docbook-$DISTRO-$ADDEDSUFFIX-$RELEASEVERSION ]; then \
      mkdir $DISTRO-$ADDEDSUFFIX; \
      cp -pR $TMP/docbook-$DISTRO-$ADDEDSUFFIX-$RELEASEVERSION/* $DISTRO-$ADDEDSUFFIX; \
    fi; \
    )
    cp \
      $TMP/docbook*-$DISTRO*$RELEASEVERSION.zip \
      README.txt \
      LatestChanges \
      $SITEBASE

    rm -rf $TMP/docbook-$DISTRO*$RELEASEVERSION.tar.bz2
    rm -rf $TMP/docbook-$DISTRO*$RELEASEVERSION.tar.gz
    rm -rf $TMP/docbook-$DISTRO*$RELEASEVERSION.zip
    rm -rf $TMP/docbook-$DISTRO-$RELEASEVERSION
    rm -rf $TMP/docbook-$DISTRO-$ADDEDSUFFIX-$RELEASEVERSION

    rm -f $DISTRO/LatestChanges HEADER.txt README.txt LatestChanges

    date

    # set up the e-mail From and To headers for buildbot message
    cat <<- EOF > $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
From: docbook buildbot <buildbot@sideshowbarker.net>
To: docbook-snapshots@lists.sourceforge.net
EOF

    # Run build-check and determine if it exits without any errors
    if $repo_dir/buildtools/build-check $LOGDIR/docbook-$DISTRO-$RELEASEVERSION.log.tmp
    then
      # build-check completed successfully, so prepare the
      # buildbot message accordingly
      echo "Subject: $DISTRO snapshot $REVISION now available" >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
      echo >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
      echo "$DISTRO snapshot $REVISION appears to have been built successfully" >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
      echo >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
      # append the commit message for this revision
      git show --quiet $REVISION >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
      echo >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
      echo "For further details about the code changes in this revision, see:" >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
      echo "http://docbook.svn.sf.net/docbook/?rev=$REVISION&view=rev" >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
      echo >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
      echo "You can download the snapshot here:" >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
      echo "http://docbook.sf.net/snapshots/" >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
    else
      # build-check did not complete successfully, so prepare
      # the buildbot message accordingly
      echo "Subject: $DISTRO snapshot build is broken at r$REVISION" >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
      echo >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
      echo "The $DISTRO snapshot build appears to be broken at r$REVISION or before." >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
      # run buildcheck again and copy the output to the beginning
      # of the buildbot message
      $repo_dir/buildtools/build-check $LOGDIR/docbook-$DISTRO-$RELEASEVERSION.log.tmp >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
      echo >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
      # append the commit message for this revision
      git show --quiet $REVISION >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
      echo >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
      echo "For further details about the code changes in this revision, see:" >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
      echo >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
      echo "http://docbook.svn.sf.net/docbook/?rev=$REVISION&view=rev" >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
      echo >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
      echo "The complete log file for the r$REVISION build follows." >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
      echo >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
      echo "-----------------------------------------------------------------" >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
      echo >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
      # copy the entire log file to the buildbot message
      cat $LOGDIR/docbook-$DISTRO-$RELEASEVERSION.log.tmp >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
      echo >> $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt
    fi

    # send the buildbot message
    /usr/sbin/sendmail -f buildbot@sideshowbarker.net docbook-snapshots@lists.sourceforge.net < $TMP/docbook-$DISTRO-$RELEASEVERSION-message.txt

    cp $LOGDIR/docbook-$DISTRO-$RELEASEVERSION.log.tmp $SITEBASE/docbook-$DISTRO-$RELEASEVERSION.log
    rm -f $TMP/docbook-$DISTRO-$RELEASEVERSION.lock

    cd -
  done
fi
